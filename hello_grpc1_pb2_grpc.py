# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import hello_grpc1_pb2 as hello__grpc1__pb2


class BilibiliStub(object):
    """传输方式
    1:unary 单程，是无状态的链接，请求一次之后就自动断开了
    2：stream（类似于socket，握手之后不断开，是一个长连接，数据可以一直来回传输，可以长时间使用就不需要每次都握手了）
    stream：1：单向1：客户端不停给服务器发，服务器只接收 2：双向：建立长连接，客户端请求服务器（流），服务器返回给客户端（流）
    3:单向2：服务器不停给客户端发，客户端只接收
    流的那一端会不停的收到值
    import "导入插件路径" //一般插件属于golang，需要这个环境
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HelloDewei = channel.unary_unary(
                '/test.Bilibili/HelloDewei',
                request_serializer=hello__grpc1__pb2.HelloDeweiReq.SerializeToString,
                response_deserializer=hello__grpc1__pb2.HelloDeweiReply.FromString,
                )
        self.HelloTest = channel.stream_stream(
                '/test.Bilibili/HelloTest',
                request_serializer=hello__grpc1__pb2.HelloTestReq.SerializeToString,
                response_deserializer=hello__grpc1__pb2.HelloTestReply.FromString,
                )
        self.TestClientRecvStream = channel.unary_stream(
                '/test.Bilibili/TestClientRecvStream',
                request_serializer=hello__grpc1__pb2.TestClientRecvStreamRequest.SerializeToString,
                response_deserializer=hello__grpc1__pb2.TestClientRecvStreamResponse.FromString,
                )
        self.TestClientsendStream = channel.stream_stream(
                '/test.Bilibili/TestClientsendStream',
                request_serializer=hello__grpc1__pb2.TestClientsendStreamRequest.SerializeToString,
                response_deserializer=hello__grpc1__pb2.TestClientsendStreamResponse.FromString,
                )
        self.TestTwoWayStream = channel.stream_stream(
                '/test.Bilibili/TestTwoWayStream',
                request_serializer=hello__grpc1__pb2.TestTwoWayStreamRequest.SerializeToString,
                response_deserializer=hello__grpc1__pb2.TestTwoWayStreamResponse.FromString,
                )


class BilibiliServicer(object):
    """传输方式
    1:unary 单程，是无状态的链接，请求一次之后就自动断开了
    2：stream（类似于socket，握手之后不断开，是一个长连接，数据可以一直来回传输，可以长时间使用就不需要每次都握手了）
    stream：1：单向1：客户端不停给服务器发，服务器只接收 2：双向：建立长连接，客户端请求服务器（流），服务器返回给客户端（流）
    3:单向2：服务器不停给客户端发，客户端只接收
    流的那一端会不停的收到值
    import "导入插件路径" //一般插件属于golang，需要这个环境
    """

    def HelloDewei(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HelloTest(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestClientRecvStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestClientsendStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestTwoWayStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BilibiliServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HelloDewei': grpc.unary_unary_rpc_method_handler(
                    servicer.HelloDewei,
                    request_deserializer=hello__grpc1__pb2.HelloDeweiReq.FromString,
                    response_serializer=hello__grpc1__pb2.HelloDeweiReply.SerializeToString,
            ),
            'HelloTest': grpc.stream_stream_rpc_method_handler(
                    servicer.HelloTest,
                    request_deserializer=hello__grpc1__pb2.HelloTestReq.FromString,
                    response_serializer=hello__grpc1__pb2.HelloTestReply.SerializeToString,
            ),
            'TestClientRecvStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TestClientRecvStream,
                    request_deserializer=hello__grpc1__pb2.TestClientRecvStreamRequest.FromString,
                    response_serializer=hello__grpc1__pb2.TestClientRecvStreamResponse.SerializeToString,
            ),
            'TestClientsendStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TestClientsendStream,
                    request_deserializer=hello__grpc1__pb2.TestClientsendStreamRequest.FromString,
                    response_serializer=hello__grpc1__pb2.TestClientsendStreamResponse.SerializeToString,
            ),
            'TestTwoWayStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TestTwoWayStream,
                    request_deserializer=hello__grpc1__pb2.TestTwoWayStreamRequest.FromString,
                    response_serializer=hello__grpc1__pb2.TestTwoWayStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'test.Bilibili', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bilibili(object):
    """传输方式
    1:unary 单程，是无状态的链接，请求一次之后就自动断开了
    2：stream（类似于socket，握手之后不断开，是一个长连接，数据可以一直来回传输，可以长时间使用就不需要每次都握手了）
    stream：1：单向1：客户端不停给服务器发，服务器只接收 2：双向：建立长连接，客户端请求服务器（流），服务器返回给客户端（流）
    3:单向2：服务器不停给客户端发，客户端只接收
    流的那一端会不停的收到值
    import "导入插件路径" //一般插件属于golang，需要这个环境
    """

    @staticmethod
    def HelloDewei(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/test.Bilibili/HelloDewei',
            hello__grpc1__pb2.HelloDeweiReq.SerializeToString,
            hello__grpc1__pb2.HelloDeweiReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HelloTest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/test.Bilibili/HelloTest',
            hello__grpc1__pb2.HelloTestReq.SerializeToString,
            hello__grpc1__pb2.HelloTestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestClientRecvStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/test.Bilibili/TestClientRecvStream',
            hello__grpc1__pb2.TestClientRecvStreamRequest.SerializeToString,
            hello__grpc1__pb2.TestClientRecvStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestClientsendStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/test.Bilibili/TestClientsendStream',
            hello__grpc1__pb2.TestClientsendStreamRequest.SerializeToString,
            hello__grpc1__pb2.TestClientsendStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestTwoWayStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/test.Bilibili/TestTwoWayStream',
            hello__grpc1__pb2.TestTwoWayStreamRequest.SerializeToString,
            hello__grpc1__pb2.TestTwoWayStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
